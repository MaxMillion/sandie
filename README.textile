"Sandie":http://github.com/premasagar/sandie is a simple method for creating a new JavaScript _context_ in the browser, e.g. for loading external scripts into a page without affecting the global scope of the document. This is useful when there is a need to avoid collisions between otherwise conflicting scripts and to keep the global namespace clean - e.g. when including third-party JavaScript widgets in a web page (see the "Sqwidget project":http://github.com/premasagar/sqwidget).

Scripts are sandboxed by loading them inside the window of a temporary iframe, and then returned to a callback function, so that they can be used elsewhere on the main document.

* by "Premasagar Rose":http://github.com/premasagar
** "premasagar.com":http://premasagar.com / "dharmafly.com":http://dharmafly.com
* "MIT license":http://opensource.org/licenses/mit-license.php


h1. Usage

See initial demo at "dharmafly.com/sandie/demo/":http://dharmafly.com/sandie/demo/


h2. Avoid var collisions between competing scripts

bc. var foo = 'bar';
sandie(
    'script.js',            // this example script contains "var foo = 'blah';"
    function(exports){      // a callback function, containing vars added by the script
        alert(foo);         // 'bar' (from global scope in the main document)
        alert(exports.foo); // 'blah' (from the sandboxed script)
    }
);


h2. Load multiple scripts

bc. sandie(
    ['script1.js', 'script2.js'], // multiple script src's
    function(exports){            // 'exports' is an object, with properties 'foo1' & 'foo2' from the scripts
        alert(exports.foo1 + exports.foo2);
    }
);

h2. Load objects and pass functions into the sandbox

bc. sandie(
    [{foo1:bar}, function(){this.foo2 = 'blah';}, 'foo3.js'],   // objects, functions and external scripts
    function(exports){                 // 'exports' is a key-value object of 'foo1', 'foo2' & 'foo3'
        alert(exports.foo1 + exports.foo2 + exports.foo3);
    }
);

In this example, an object is merged into the global scope of the sandbox (i.e. the iframe @window@), a function is executed in the scope of the sandbox, and then an external script is loaded.

This is useful, for example, when certain variables and functions are required to be in place before loading an external script.

h2. To Do

* Allow external scripts to load in order, in case one is dependent on another


h2. Example uses

* Allowing widgets to load different versions of the same plugin or JavaScript library
* Allowing widgets to load different scripts that use the same names for global variables
* (In fact, these are exactly the use cases of "Sqwidget":http://github.com/premasagar/sqwidget, which Sandie was created for)


h2. Project status

Under active development, with extended functionality on its way.
So far confirmed working in:

* Chrome 5 on Ubuntu & Windows Vista
* Chrome 6 on Ubuntu
* Firefox 3.6.4
* Firefox 2.0.0 on Windows XP
* IE8 on Windows Vista
* IE7 on Windows XP
* IE6 on Windows XP
* Safari 4.0.5 on Windows Vista
* Safari 3.2.2 on Windows XP
* Opera 10.10 on Ubuntu
* Opera 10.60a on Ubuntu
* Opera 10.10 on Windows Vista
* Mobile: Safari on iPhone 3G v3.1.3
* Mobile: Android 1.6 with browser v4
* Mobile: Opera Mini on iPhone
