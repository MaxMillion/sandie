"Sandie":http://github.com/premasagar/sandie is a simple method for loading external JavaScript files into a page without affecting the global scope of the document. This is useful when there is a need to avoid collisions between conflicting scripts and to keep the global namespace clean - e.g. when including third-party JavaScript widgets in a web page (see the "Sqwidget project":http://github.com/premasagar/sqwidget).

Scripts are sandboxed by loading them inside the window of a temporary iframe, and then returned to a callback function, so that they can be used elsewhere on the main document.

* by "Premasagar Rose":http://github.com/premasagar
** "premasagar.com":http://premasagar.com / "dharmafly.com":http://dharmafly.com
* "MIT license":http://opensource.org/licenses/mit-license.php


h1. Usage

See initial demo at "dharmafly.com/sandie/demo/":http://dharmafly.com/sandie/demo/


h2. Avoid var collisions between competing scripts

bc. var foo = 'bar';
sandie(
    'script.js',     // this example script contains "var foo = 'blah';"
    'foo',           // the name of the var to capture from the sandboxed script
    function(foo2){  // a callback function, for once the script has loaded
        alert(foo);  // 'bar' (from global scope in the main document)
        alert(foo2); // 'blah' (from the sandboxed script)
    }
);


h2. Load one script, and return one variable:

bc. sandie(
    'http://example.com/script.js', // script src
    'foo',                          // the sandboxed var 'foo' to pass to the callback
    function(myVar){                // myVar === foo from the sandboxed script
        alert(myVar);
    }
);


h2. Load multiple scripts, and return multiple variables:

bc. sandie(
    ['script1.js', 'script2.js'],   // multiple script src's
    ['foo1', 'foo2'],               // the sandboxed vars to pass to the callback
    function(vars){                 // 'vars' is a key-value object of 'foo1' & 'foo2'
        alert(vars.foo1 + vars.foo2);
    }
);

h2. Load objects and pass functions into the sandbox

bc. sandie(
    [{foo1:bar}, function(){this.foo2 = 'blah';}, 'foo3.js'],   // objects, functions and external scripts
    ['foo1', 'foo2', foo3],          // the sandboxed vars to pass to the callback
    function(vars){                 // 'vars' is a key-value object of 'foo1', 'foo2' & 'foo3'
        alert(vars.foo1 + vars.foo2 + vars.foo3);
    }
);

In this example, an object is merged into the global scope of the sandbox (i.e. the iframe @window@), a function is executed in the scope of the sandbox, and then an external script is loaded.

This is useful, for example, when certain variables and functions are required to be in place before loading an external script.

h2. To Do

* Allow objects and functions to be included _after_ external scripts have been loaded.
* Allow external scripts to load in order, in case one is dependent on another


h2. Example uses

* Allowing widgets to load different versions of the same plugin or JavaScript library
* Allowing widgets to load different scripts that use the same names for global variables
* (In fact, these are exactly the use cases of "Sqwidget":http://github.com/premasagar/sqwidget, which Sandie was created for)


h2. Project status

Pre-alpha. So far tested in Firefox 3.6.4, Chrome 5 beta & Opera 10.10 (on Linux Ubuntu).
Under active development, with extended functionality on its way.
